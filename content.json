{"meta":{"title":"Hexo","subtitle":"�չ�һ�䣬�����ƾ�","description":null,"author":"����","url":"http://yoursite.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-03-04T06:13:12.458Z","updated":"2020-03-03T04:23:20.680Z","comments":false,"path":"/404.html","permalink":"http://yoursite.com//404.html","excerpt":"","text":""},{"title":"书单","date":"2020-03-03T04:23:20.696Z","updated":"2020-03-03T04:23:20.696Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"听风的个人博客","date":"2020-03-04T05:05:18.007Z","updated":"2020-03-04T05:05:18.007Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"这个人比较懒。。。"},{"title":"友情链接","date":"2020-03-03T04:23:20.705Z","updated":"2020-03-03T04:23:20.705Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-03-03T04:23:20.701Z","updated":"2020-03-03T04:23:20.701Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-03-04T05:09:30.639Z","updated":"2020-03-03T04:23:20.710Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-03-03T04:23:20.714Z","updated":"2020-03-03T04:23:20.714Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"JavaEE-01","date":"2020-03-04T15:50:39.798Z","updated":"2020-03-04T16:01:18.843Z","comments":true,"path":"2020/03/04/JavaEE-01/","link":"","permalink":"http://yoursite.com/2020/03/04/JavaEE-01/","excerpt":"","text":"一、JAVA(windows)安装教程1.下载java 前往甲骨文官网下载jdk [jdk下载地址](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) 这里我下载的是windows版本的jdk8 2.安装 由于之前安装时没有仔细截图，这儿就不贴图片了，当然过程也比较简单，一直点击下一步就行了。 3.环境变量配置（重要） 1.右键我的电脑，点击最下面的属性，之后再弹框里点击高级系统设置，再点击环境变量 2.点击新建后 (1)新建-&gt;变量名&quot;JAVA_HOME&quot;，变量值C:\\Java\\jdk1.8.0_05（即JDK的安装路径） (2)编辑-&gt;变量名&quot;Path&quot;，在原变量值的最后面加上 %JAVA_HOME%\\bin之后一路点击确定 4.验证是否安装成功 1.打卡cmd，输入java -version，出现相关版本信息就ok. 2.打卡cmd, 输入javac，出现javac用法就ok. 二、安装Tomcat (Windows)1.Tomcat下载 1.打开Tomcat官网，默认进入官网首页，官网地址为：[tomcat官网](https://tomcat.apache.org/) 2、左侧的导航栏可以看到 Download（下载），以及最近相关版本的Tomcat（9、8、7...），这里选择的是Tomcat9，点击进入 3、进入tomcat9的相关页面后会显示一些该版本的信息，可以忽略，鼠标下滑进行查找 4、这里我选择了tomcat9 5、现在该选择下载Tomcat9的安装方式了，解压版和安装版，解压版是第一个选项链接，但个人倾向于安装版，即最后一个选项链接（Windows Service Installer - Windows服务的安装程序），点击进行下载 2.Tomcat安装 由于我的电脑8080端口装的apache24，我就把tomcat的配置文件改到了8081端口，因此我当问的是http://localhost:8081/ 1、Tomcat安装还是比较方便的，双击你下载的Tomcat .exe 文件进入安装界面 2、点击 Next（下一步） 3、点击 I Agree（我同意） 4、点击 Next（下一步） 5、到了这里，就需要注意一下了，需要设置自己的端口号（四位），默认为8080，如果你想设置成其他，也可以，但不推荐，因为可能会与其他端口冲突导致Tomcat无法正常启用等后果，想好后点击 Next（下一步） 6、这里就更需要注意了，这是配置jre的关键步骤，所以，在安装Tomcat之前需要下载安装并配置jdk，Tomcat8.5会找到你jre的more默认，如果你在安装jre的时候，为自定义路径，这里就需要改成你的jre安装路径，选择完后点击 Next（下一步） 7、这里就是你Tomcat的默认安装路径，当然，你也可以自定义，看个人喜好，选择完后点击 Install（安装） 8、打开浏览器，输入HTTP协议，加上你的Tomcat的端口号，即 http://localhost:8080/，进入Tomcat页面则表示成功，否则为失败，卸载重装，同时检查你的jdk是否安装配置，安装时jre的路径选择是否正确 三、安装Mysql (Windows)1、安装包下载。 下载地址：下载地址 2、解压缩至安装目录解压缩下载之后的zip，我这里使用的安装路径为：C:\\Program Files\\mysql-8.0.18-winx64 解压缩之后： 1.执行命令：mysqld --initialize-insecure --user=mysql 生成data文件夹 2.配置环境变量 变量名：MYSQL_HOME 变量值：C:\\Program Files\\mysql-8.0.18-winx64 3.编辑-&gt;变量名&quot;Path&quot;，在原变量值的最后面加上 %MYSQL_HOME%\\bin之后一路点击确定 3、 安装MySQL 执行命令：mysqld -install 4、启动服务 执行命令：net start MySQL 5、登录MySQL 登录mysql:(因为之前没设置密码，所以密码为空，不用输入密码，直接回车即可） mysql -u root -p 设置密码：set password for &apos;root&apos;@&apos;localhost&apos; = password(&apos;123456&apos;); 四、创建IDEA Java EE项目1.打开IDEA，点击Create Project 2.选择Java Enterprise，勾选Web Application 3.新建Tomcat Server 4.编辑项目名称，选择项目位置 5.点击完成 五、使用JDBC连接Mysql，并读取数据1.下载mysql-connector的jar包并复制到项目的lib目录，下载链接：mysql-connector-java.jar下载网址 2.打Project Structer将lib填添加至Libraries 3.编写测试代码 123456789101112131415161718192021222324252627282930313233343536373839404142package com.kle.code;import java.sql.*;public class TestJdbc &#123; public static String getMysql()&#123; String url = \"jdbc:mysql://localhost:3306/school\"; String driverName = \"com.mysql.cj.jdbc.Driver\"; String sqlString = \"SELECT * FROM teacher limit 10\"; try&#123; //加载驱动 Class.forName(driverName); //创建连接 Connection connection = DriverManager.getConnection(url,\"kle\", \"yqyforever\"); //通过连接获取Statement Statement statement = connection.createStatement(); //通过 statement 执行 sqlString 进行查询 ResultSet resultSet = statement.executeQuery(sqlString); while (resultSet.next())&#123; System.out.println(resultSet.getString(1)); &#125; &#125; catch (ClassNotFoundException | SQLException e) &#123; e.printStackTrace(); &#125; return null; &#125; public static void main(String[] args)&#123; getMysql(); &#125;&#125; 4.运行结果 注意事项：mysql的jdbc驱动名称最新版为“com.mysql.cj.jdbc.Driver”","categories":[],"tags":[]},{"title":"今天学了几个排序算法（一）","slug":"今天学了几个排序算法(一）","date":"2019-04-05T04:32:28.165Z","updated":"2019-04-05T04:51:12.782Z","comments":true,"path":"2019/04/05/今天学了几个排序算法(一）/","link":"","permalink":"http://yoursite.com/2019/04/05/今天学了几个排序算法(一）/","excerpt":"","text":"（本篇实现均为升序）1.冒泡排序 最经典的排序算法。其思想是遍历未排序序列，通过比较相邻元素的值从而实现每次循环后将未排序序列中的最大值（构建升序序列）移至最后，后面的序列就是自动形成的有序序列，之前的序列被看做为排序序列。 算法实现：123456789101112131415161718int* bubble_sort(int arr[], int len)&#123; bool flag = false; for(int i = 0;i &lt; len - 1; i++)&#123; for(int j = 0;j &lt; len - 2 - i;j++)&#123; if(arr[j] &gt; arr[j + 1])&#123; int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; flag = true; &#125; &#125; if(!flag)&#123; break; &#125; flag = false; &#125; return arr;&#125; 2.选择排序应该是人们最容易想到的算法，其思想将序列分为有序和未排序两部分，初始的未排序序列就是该序列整体，每次从未排序序列中选取最小的数，与数组前面的元素依次进行交换形成有序序列，直至遍历完毕。算法实现：1234567891011121314int* select_sort(int arr[], int len)&#123; for(int i = 0;i &lt; len - 1;i++)&#123; int min = i; for(int j = i;j &lt; len - 1;j++)&#123; if(arr[j] &lt; arr[min])&#123; min = j; &#125; &#125; int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; &#125; return arr;&#125; 3.直接插入排序直接插入排序基本的思想是递归，将数组看做一个有序序列和一个无序序列，最开始有序序列只有一个元素arr[0],其余构成无序序列，每次从无序序列中取出一个元素插入有序序列恰当位置，使之成为有序序列，重复n-1次即可完成排序。算法实现：123456789101112int* dire_insert_sort(int arr[], int len)&#123; for(int i = 0;i &lt; len - 1;i++)&#123; int cur = arr[i + 1]; int pre = i; do&#123; arr[pre + 1] = arr[pre]; pre--; &#125;while(temp &lt; arr[j] &amp;&amp; j &gt;= 0); arr[pre + 1] = cur; &#125; return arr;&#125; 4.希尔排序采用了增量减小的排序思想，increment的取值一直有争议，此处increment初始值为len/3取下限+1通过increment构成划分，再对分别划分进行直接插入，直至increment增量小于等于11234567891011121314151617int* shell_sort(int arr[], int len)&#123; do&#123; increment = len / 3 + 1; for(int i = increment;i &lt; len - 1;i++)&#123; if(arr[i - increment] &gt; arr[i])&#123; int temp = arr[i]; int j = i - increment; do&#123; arr[j] = arr[i]; j -= increment; &#125;while(arr[j] &gt; temp &amp;&amp; j &gt;= 0); arr[j + increment] = temp; &#125; &#125; &#125;while(increment &gt; 1); return arr;&#125; 5.归并排序采用了分而治之的思想，将序列看做左右两边，利用递归方法对左右两边排序，最终合并为一个有序序列1234567891011121314151617181920212223242526272829303132333435363738394041424344int* merger_sort(int arr[], int len)&#123; if(len &lt; 2)&#123; return arr; &#125; int middle = len / 2; int* left; int* right; for(int i = 0;i &lt; len - 1;i++)&#123; if(i &lt; middle)&#123; left[i] = arr[i]; &#125;else&#123; right[i - middle] = arr[i]; &#125; &#125; return merge(merger_sort(left, middle), merger_sort(right, len - middle), middle, len - middle);&#125;int *merge(int* left, int* right,int llen, int rlen)&#123; int i = 0; int j = 0; int k = 0; int* result; while(i &lt;= llen - 1 &amp;&amp; j &lt;= rlen - 1)&#123; if(left[i] &lt;= right[j])&#123; result[k] = left[i]; i++; &#125;else&#123; result[k] = right[j]; j++; &#125; k++; &#125; while(i &lt;= llen - 1)&#123; result[k] = left[i]; i++; k++; &#125; while(j &lt; rlen - 1)&#123; result[k] = right[j]; j++; k++; &#125; return result;&#125;","categories":[],"tags":[]},{"title":"hello","slug":"hello","date":"2019-03-23T04:45:01.000Z","updated":"2019-04-05T04:36:59.124Z","comments":true,"path":"2019/03/23/hello/","link":"","permalink":"http://yoursite.com/2019/03/23/hello/","excerpt":"","text":"###this is my first blog written by hexo###","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-23T04:08:14.749Z","updated":"2019-03-23T04:08:14.749Z","comments":true,"path":"2019/03/23/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}